#
# SetSource sets $SOURCE so that the other functions know where to
# look for RPMs
#
function SetSource ()
{
    case "$INSTALLFROM" in

    Floppy)
        SOURCE=${SOURCE-/mnt/floppy}
        ;;
    CD-ROM)
        SOURCE=${SOURCE-/mnt/cdrom}
        ;;
    RedHat-CD)
        SOURCE=${SOURCE-/mnt/cdrom/RedHat/RPMS}
        ;;
    ZIP)
        SOURCE=${SOURCE-/mnt/zip}
        ;;
    TempDir)
        SOURCE=${SOURCE-/var/tmp}
        ;;
    esac
}


#
# If the Source was a mountable file system, we try to mount the
# according device
#
function MountDevice ()
{
    SetSource

    case "$INSTALLFROM" in

    Floppy)
        MountFloppy;
        ;;
    ZIP)
	rmmod lp
	modprobe ppa
	mount /dev/zip /mnt/zip
	;;
    CD-ROM|RedHat-CD)
        mount $CDROM /mnt/cdrom >/dev/null 2>&1
        # mount may fail if already mounted, which will harm the test at
        # the caller. So we grep for the all mounted devices to look if
        # if a /mnt/cdrom is there. This gives us a zero errorlevel even
        # when the above mount failed because of an already-mounted status.
        mount | grep -q /mnt/cdrom
        ;;

    esac
}



#
# simple enough: unmount the device
#
function UnmountDevice ()
{
    case "$INSTALLFROM" in

    Floppy)
        umount /mnt/floppy >/dev/null 2>&1
        ;;
    CD-ROM|RedHat-CD)
        umount /mnt/cdrom >/dev/null 2>&1
        ;;
    ZIP)
        umount /mnt/zip >/dev/null 2>&1
	rmmod ppa
	modprobe lp
        ;;
    esac
}


#
# Presents a list of all RPM files on $SOURCE to the user
#
function SelectPackage ()
{
    dialog --infobox "Searching for RPMs ..." 3 30
    ls $SOURCE/*.rpm >/dev/null 2>&1 || {
        dialog --msgbox "There are no RPM modules on this disk" 5 50
        CHOICE=""
        return
    }
    echo -n "dialog --menu \"Select package to $1\" 23 65 15 " >$TMPFILE.dialog
    cd $SOURCE
    ls els-*.rpm >/dev/null 2>&1 && ls els-*.rpm |awk '{ printf("%s %c%c ", $1, 34,34) }' >>$TMPFILE.dialog
    ls *.rpm | grep -sv ^els- |awk '{ printf("%s %c%c ", $1, 34,34) }' >>$TMPFILE.dialog
    cd -
    { . $TMPFILE.dialog } 2>$TMPFILE
    CHOICE=`cat $TMPFILE`
}


#
# This function selects a configuration file which
# is different from it's sample
#
function SelectConfig ()
{
    dialog --infobox "Searching config files..." 3 30
    echo -n "dialog --menu \"Select config file to $1\" 23 65 15 " >$TMPFILE.dialog

    perl -w <<-"EOF" >>$TMPFILE.dialog
    for $module (glob '/usr/src/redhat/SPECS/*.spec') {
        open FILE, $module;
        $module =~ m:SPECS/(.+)\.spec:;
        $module = $1;
        while (defined($_ = <FILE>)) {
            chomp;
            next if $_ =~ m:rc\.sysadm:;
            next if $_ =~ m:sendmail\.c[fw]:;
            next unless $_ =~ m:(.+)\.sample$:;
            @sample = stat $_ or next;
            @config = stat $1 or next;

	    if (($sample[7] != $config[7]) || ($sample[9] != $config[9])) {
		print "\"$1\" \"$module\" " ;
		$found = 1;
	    }
        }
        close FILE;
    }
    exit(1) unless $found;
EOF
    if [ $? = 1 ]; then
	unset CHOICE
    else
	{ . $TMPFILE.dialog } 2>$TMPFILE
	CHOICE=`cat $TMPFILE`
    fi
}




case "$1" in

     Query)
        Title "Main" "Install" "Install or update software modules"
        test -z "$SOURCE" && SetSource
        Option "List"        "Display list of installed modules"
        Option "Filelist"    "Display list of files contained in a module"
        Option "Source"      "Select source for installation (now $INSTALLFROM)"

        test "$INSTALLFROM" = "Floppy" || \
        Option "Path"        "For experts: source path (now $SOURCE)"

        Option "Test"        "Test installation and show info of uninstalled module"
        Option "Install"     "Install a module"
        Option "Remove"      "Remove a module"
	Option "Verify"      "Verify what's new in the sample config files"
	Option "Modulelist"  "List missing or non-standard modules"
        ;;

	#Desc
	# The Easy Linux Server consists of several RPM modules.
	# Together they define what software is installed at your server.
	# Use this menu to maintain your installation, e.g. add new modules,
	# delete unneeded modules and so on.
	#
	# There are two main types of RPM: binary RPMs and source code RPMs.
	# Use this menu only with binary RPMs. Source code RPMs are for
	# programmers. They seldom use menus anyway ...  :-)
	#DescEnd


     list)
        #Desc
        # This will display a list of all your installed modules, probably
        # something like this:
        #Textbox
        # Installed ELS packages:
        #
        # els-base-1.0-2
        #
        # Installed general packages:
        #
        # MAKEDEV-2.2-9
        # NetKit-B-0.09-6
        # SysVinit-2.64-8
        # XFree86-libs-3.2-9
        # adduser-1.7-1
        # ash-0.2-8
        # bash-1.14.7-1
        #TextboxEnd
	#Item Usage
	#Macro Textbox
        #DescEnd

        echo -e "Installed ELS packages:\n" >$TMPFILE
        rpm -qa | grep ^els | sort >>$TMPFILE
        echo -e "\nInstalled general packages:\n" >>$TMPFILE
        rpm -qa | grep -v ^els | sort >>$TMPFILE
        dialog --textbox $TMPFILE 23 76
        ;;


     filelist)
        #Desc
        # This will show many internals of an already installed module,
        # like module header, list of files, installation scripts and so
        # on. Here is an example of one of the smallest modules (just one
        # file):
        #Textbox
        # Contents of redhat-release-4.2-1:
        #
        # Name        : redhat-release              Distribution: Red Hat Linux Bi
        # Version     : 4.2                               Vendor: Red Hat Software
        # Release     : 1                             Build Date: Wed Apr 23 02:20
        # Install date: Thu Jun 05 14:34:53 1997      Build Host: porky.redhat.com
        # Group       : Base                          Source RPM: redhat-release-4
        # Size        : 23
        # Summary     : (none)
        # Description :
        # Red Hat Linux release file
        #
        #
        # What files are in the module?
        # -----------------------------
        # /etc/redhat-release
        #
        #
        # What scripts are in the module?
        # -------------------------------
        # preinstall script:
        # (none)
        # postinstall script:
        # (none)
        # preuninstall script:
        # (none)
        # postuninstall script:
        # (none)
        # verify script:
        # (none)
        #TextboxEnd
	#Item Usage
	#Macro Textbox
        #
        #Item Hint
	# If you are interested in similar data about an uninstalled
	# module, use the <A HREF="#test">Test</A> menu entry.
        #DescEnd

        # ask for an installed module
        echo -n "dialog --menu \"For which package do you want info?\" 23 65 15 " >$TMPFILE.dialog
        rpm -qa | awk '{ printf("%s %c%c ", $1, 34,34) }' >>$TMPFILE.dialog
        { . $TMPFILE.dialog } 2>$TMPFILE
        test $? = 0 || return
        CHOICE=`cat $TMPFILE`

        # creating the asked data
        echo -e "Contents of $CHOICE:\n" >$TMPFILE
        rpm -qi $CHOICE 2>&1 >>$TMPFILE
        echo -e "\n\nWhat files are in the module?" >>$TMPFILE
        echo -e "-----------------------------" >>$TMPFILE
        rpm -ql $CHOICE 2>>$TMPFILE >>$TMPFILE
        echo -e "\n\nWhat scripts are in the module?" >>$TMPFILE
        echo -e "-------------------------------" >>$TMPFILE
        rpm -q --scripts $CHOICE >>$TMPFILE
        echo -e "\n" >>$TMPFILE
        dialog --textbox $TMPFILE 23 76
        ;;


     source)
        #Desc
	# New RPMs can come from different sources: CDROMs, from a floppy,
	# a ZIP drive or from the Internet. Depending on the source of the
	# RPM, it is usually stored on different locations:
        #Menu Source Default directory that is searched for RPMs
        # Floppy    <TT>/mnt/floppy</TT>
        # CD-ROM    <TT>/mnt/cdrom</TT>
        # RedHat-CD <TT>/mnt/cdrom/RedHat/RPMS</TT>
        # ZIP       <TT>/mnt/zip</TT>
        # TempDir   <TT>/var/tmp</TT>
        #MenuEnd
	#Item Usage
	#Macro Menu
        #DescEnd

        dialog --menu "Select source for installation of RPMs" 13 50 5 \
                      "Floppy"    "/mnt/floppy" \
                      "CD-ROM"    "/mnt/cdrom" \
                      "RedHat-CD" "/mnt/cdrom/RedHat/RPMS" \
                      "ZIP"       "/mnt/zip" \
                      "TempDir"   "/var/tmp" 2>$TMPFILE
        test $? = 0 || return
        CHOICE=`cat $TMPFILE`
        unset SOURCE
        SetOpt "INSTALLFROM" "$CHOICE"
        ;;


     path)
        #Desc
	# As you migth have noticed, the <a href="#source">Source</A> option
	# already changed the path for you. But sometimes you want to an RPM
	# from a total weird path, e.g. from
	# <TT>/mnt/cdrom/sunsite/infosystems/apache-1.3.0.i486.rpm</TT>. So
	# you need a way to change the installation path from the normal
	# "<TT>/mnt/cdrom</TT>" to
	# "<TT>/mnt/cdrom/sunsite/infosystems</TT>":
	#
	#Item Usage
	# After selection, you will see an input box for the path:
	#Input
	# Enter path for RPM
	#InputEnd
	#
	#Item Visibility
	# You can change the path only if the current
	# <A HREF="#source">Source</A> is not set to "Floppy".
        #DescEnd

        InputString "Enter path to RPMs"
        test -z "$CHOICE" && return
        SOURCE=$CHOICE
        ;;


     test)
        #Desc
        # "Test" displays information for arbitrary modules. It also tests
	# if the selected module would be installable. In case of a problem
	# it gives you detailed information of what is wrong.
        #DescEnd

        if MountDevice; then
            SelectPackage "test"
            if [ ! -z "$CHOICE" ]; then
                dialog --infobox "Please wait ... testing ..." 3 40
                echo -e "Contents of $CHOICE:\n" >$TMPFILE
                rpm -qip $SOURCE/$CHOICE 2>&1 >>$TMPFILE
                echo -e "\n\nWould the installation succeed?" >>$TMPFILE
                echo -e "-------------------------------" >>$TMPFILE
                rpm -Uv --test $SOURCE/$CHOICE 2>>$TMPFILE >/dev/null && echo "yes" >>$TMPFILE
                echo -e "\n\nWhat files are in the module?" >>$TMPFILE
                echo -e "-----------------------------" >>$TMPFILE
                rpm -qlp $SOURCE/$CHOICE 2>>$TMPFILE >>$TMPFILE
                echo -e "\n\nWhat scripts are in the module?" >>$TMPFILE
                echo -e "-------------------------------" >>$TMPFILE
                rpm -q --scripts -p $SOURCE/$CHOICE >>$TMPFILE
                echo -e "\n" >>$TMPFILE
                dialog --textbox $TMPFILE 23 76
            fi
            UnmountDevice
        fi
        ;;


     install)
        #Desc
        # This will actually do the installation. The installation process
        # itself works without any user-intervention. There is no way to
	# modify the behavior of a module during installation time. You can
	# do this later, e.g. with Sysadm.
	#
	# It might also be the case the the installation log asks you to
	# check configuration file. This happens when the sample configuration
	# file (brought to you by the maintainers of the various modules)
	# are different from your configuration files. If you are techy
	# enought to actually do this, use the <A HREF="#new">New</A>
	# option of this menu.
        #DescEnd

        if MountDevice; then
            SelectPackage "install"
            if [ ! -z "$CHOICE" ]; then
		cls
                echo -e "Please wait ... installing ...\n"
		{
		    echo -e "rpm -Uhv $SOURCE/$CHOICE\n"
		    rpm -Uhv $SOURCE/$CHOICE
		    if [ "$?" = "0" ]; then
			echo -e "\nInstallation successful."
			{
			    rpm -ql ${CHOICE%%.i386.rpm} | grep .sample
			} >$TMPFILE.2 2>/dev/null
			test -s $TMPFILE.2 && {
			    echo -e "\n\n\nPlease check the following config files for new features:\n"
			    cat $TMPFILE.2
			}
			rm -f $TMPFILE.2
		    fi
		} 2>&1 | tee $TMPFILE
		dialog --textbox $TMPFILE 23 76
            fi
            UnmountDevice
        fi
        ;;


    remove)
        #Desc
        # This will remove (uninstall) a module.
	#
	# Living in an imperfect world manifests in the fact that there is no
	# undo-feature for this, so think twice what you do before you do it. :-)
        #DescEnd

        # Confirmation one
        ExpertWarning || return

        # ask for an installed module
        echo -n "dialog --menu \"Select installed package to remove $1\" 23 65 15 " >$TMPFILE.dialog
        rpm -qa |sort |grep ^om |awk '{ printf("%s %c%c ", $1, 34,34) }' >>$TMPFILE.dialog
        rpm -qa |sort |grep -v ^om |awk '{ printf("%s %c%c ", $1, 34,34) }' >>$TMPFILE.dialog
        { . $TMPFILE.dialog } 2>$TMPFILE
        test $? = 0 || return
        CHOICE=`cat $TMPFILE`

        # Confirmation two
        Question "\nAre you SURE you want to remove module $CHOICE  ???" || return

        # ok, now get rid of the module
        dialog --infobox "Removing $CHOICE ..." 3 60
        rpm -e $CHOICE >$TMPFILE 2>&1
        if [ $? = 0 ]; then
            dialog --msgbox "$CHOICE removed" 3 60
        else
            dialog --title "Warning: couldn't remove module" --textbox $TMPFILE 23 78
        fi
        ;;

    verify)
	#Desc
	# This option allows you to check your current configuration file
	# with the sample configuration file of an installed package.
	#
	#Item Usage
	# First, you can select from all configuration files that actually
	# differ:
	#Menu Select config file to test
	# /etc/aliases                          els-email
	# /etc/mailertable                      els-email
	# /etc/samba.d/global.smb               els-samba
	#MenuEnd
	#Macro Menu
	#
	# After selecting something, e.g. "<TT>/etc/mailertable</TT>", you
	# see a screen of all the differences:
	#
	#TextBox
	# Below is a list of all changes between the sample configuration
	# file and current config file. Look at the first character:
	# 
	# +  a line in your current config file (/etc/mailertable)
	# -  a line in the sample
	# 
	# 
	# --- /etc/mailertable.sample Tue Aug 11 21:49:07 1998
	# +++ /etc/mailertable Fri Aug 14 09:44:32 1998
	# @@ -48,7 +48,2 @@
	# #
	# #######################################################################
	# +subsidiary.company.de relay:subsidiary.company.de
	# +subs.company.de relay:subsidiary.company.de
	#TextBoxEnd
	#Macro TextBox
	#
	# This is a so called "contextual diff". It shows you the differences
	# as well as the context, the lines around the differences. In the
	# example, the lines beginning with hash marks '#' are such context
	# lines.
	#
	# As you can see from the + signs, I've added four mailertable
	# entries to the provided sample file. So I press the [Enter] key
	# to get to the question:
	#
	#Question
	# Do you want to activate the sample config file?
	#QuestionEnd
	#Macro Question
	#
	# "Activation" means that the original config file will be used
	# instead of my own version. While this is handy when the sample
	# config file contains major redesigns, this is not what I want in
	# the example above. So I selected "No".
	#DescEnd

	SelectConfig "test"
	if [ -z "$CHOICE" ]; then
            dialog --msgbox "All your config files are up to date!" 5 50
	    return
	fi
	SAMPLE=$CHOICE

	diff -udb $CHOICE $CHOICE.sample >$TMPFILE
	
	if [ -s $TMPFILE ]; then
	    {
		echo "Below is a list of all changes between the sample configuration file and your"
		echo "current config file. Look at the first character:"
		echo
		echo "-  a line in your current config file ($CHOICE)"
		echo "+  a line in the sample"
		echo
		echo
		tr "\t" "        " <$TMPFILE
	    } >$TMPFILE.2
	    dialog --textbox $TMPFILE.2 23 76
	    Question "Do you want to activate the sample config file?" &&
		cp --preserve $CHOICE.sample $CHOICE
	else
	    dialog --msgbox "The two files are identical, they had just different time stamps" 5 70
	    cp --preserve $CHOICE.sample $CHOICE
	fi	
	;;

  modulelist)
	#Desc
	# This option lists standard modules that are missing or upgraded
	# on your system, and any extra non-standard modules you have added.
	# Example output might be:
	#TextBox
        # MISSING:  inetd 0.16-4
	# MISSING:  gnupg 1.0.1-1
	# ADDED:    cdrecord 1.8a32-1
	# UPGRADED: info from 3.12h-2 to 4.0-5
	#TextBoxEnd
	#Macro Textbox
	#DescEnd

	# Generate list of differences in installed modules
	rpm -qa --queryformat "%{NAME} %{VERSION}-%{RELEASE}\n" |sort |diff rpmlist.txt - |egrep "^>|^<" |sort +1 >$TMPFILE.rpmdiff

	# Look for missing or upgraded standard modules
	perl -w <<-"EOF" >>$TMPFILE.modulelist
	open(RPMDIFF, "$ENV{'TMPFILE'}.rpmdiff");
	while (<RPMDIFF>) {
	    ($type, $rpmname, $rpmver)=split " ";
	    ($type eq ">") ? $added{"$rpmname"}=$rpmver : $removed{"$rpmname"}=$rpmver;
	}

	# Now print the results
	foreach $rpm (sort keys %removed) {
	    $ver = $removed{"$rpm"};
	    $addedver=$added{"$rpm"};
            if (!defined($addedver)) {
                print "MISSING:  $rpm $ver\n";
            }
            elsif ($ver > $addedver) {
                print "UPGRADE!: to $rpm $ver\n";
            }
            elsif ($ver < $addedver) {
                print "UPGRADED: $rpm from $ver to $addedver\n";
            }
	}
	foreach $rpm (sort keys %added) {
	    print "ADDED:    $rpm ". $added{"$rpm"} . "\n" if (!defined($removed{"$rpm"}));
	}
	EOF
	if [ -s $TMPFILE.modulelist ]; then
	    sort -o $TMPFILE.modulelist $TMPFILE.modulelist
	    dialog --textbox $TMPFILE.modulelist 23 76
	else
	    dialog --msgbox "No modules have been added, removed or upgraded" 5 70
	fi
	/bin/rm $TMPFILE.modulelist $TMPFILE.rpmdiff
	;;

esac
