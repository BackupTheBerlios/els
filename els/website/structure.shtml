<!--#set var="title" value="Easy Linux Server - Structure" -->
<!--#include file="top.inc"-->
<!--#include file="developers.inc"-->
<!--#include file="logos.inc"-->

<H2>Structure of the CVS directory layout</H2>
<P>
  When you checkout the module 'els' from the <A TARGET="_new"
  HREF="http://developer.berlios.de/cvs/?group_id=204">CVS</A> you
  will see the several directories.
</P>

<H3>Module directories</H3>
<P>
  Each module directory for the Easy Linux Server starts with <B>els-*</B>
  in the name. Each directory is flat, i.e., it contains all files that
  make up an ELS module, even if in the RPM they are scattered around the
  whole file system. It was decided to have it this way because this
  speeds up development, you don't have to <TT>cd</TT> into other
  directories so often. These files build up a structure on their own
  which is described <A HREF="#inside">below</A>.
</P><P>
  Some ELS modules have dependencies on external programs. If such a
  dependency is not included in Red Hat 7.2 then we have a subdirectory
  for this program that justs downloads the RPM (or downloads the source
  and creates an RPM automatically).
</P><P>
  We might also have subdirectories named <B>html</B> that contain
  automatically generated documentation pages for sysadm menus and for
  setup scripts.
</P>

<H3>The website</H3>
<P>
  The <A HREF="http://els.berlios.de">web site</A> is also
  partly automatically generated. The Makefiles and
  source files for the web site are stored in this directory.
</P>

<H3>Utilities</H3>
<P>
  In the utilities directory we store little tools (mostly written in perl)
  that are needed to create documentation or the RPMs. Many, if not all,
  carry an internal documentation. You can view them with, e.g.:
</P><P>
<TT> &nbsp; perldoc utilities/rpmhelper.pl</TT>
</P>

<A NAME="inside"></A><H2>Inside an ELS RPM</H2>
<P>
  Look for example at the RPM spec file <B>els-base.spec</B>.
  In the <B>%files</B> section you will see several comments. And by a
  strange co-incidence this are the main parts that define the
  anatomy of Easy Linux Server modules.
</P>

<H3>Preset Configuration Files</H3>
<P>
  The job of a Developer is to make the life for the Admins easier.
  Sometimes it's as simple as finding out the best options for a
  configuration file and including this in the RPM.
</P>

<H3>Config File Changer</H3>
<P>
  However, this is sometimes not possible. For example, if the
  config file <TT>/etc/inittab</TT> is in Red Hat's <B>sysvinit</B> RPM
  then Easy Linux Server's <B>els-base</B> can't contain it, too.
  One file can only belong to one application (this is enforced at
  RPM installation time.
</P><P>
  Instead we have little perl scripts <B>*.setup</B> that are executed
  by <B>sysadm-setup.pl</B>. The scripts can use all the functions
  in <B>ConfigFiles.pm</B>, a perl module specifically written to
  deal easily with text based configuration files.
</P>

<H3>Sysadm</H3>
<P>
  You might already have guessed that <A HREF="sysadm.shtml">sysadm</A>
  and it's <A HREF="sysadm/index.shtml">menus</A> play an important role,
  too.
</P>

<H3>Directory aliases</H3>
<P>
  When someone has to check things from the command line,  the directory
  aliasing can help considerable time. Specify the most often needed
  directories for your module in <B>*.dirs</B> files.
</P>

<H3>Environment profiles</H3>
<P>
  Some programs need environment variables to work correctly or optimal.
  Any Easy Linux Module can easily add system-wide environment variables.
</P>

<H3>Documentation</H3>
<P>
  If you place proper comments into your <B>*.mnu</B> sysadm menu file
  then <A HREF="sysadm/index.shtml">documentation like this</A> for your
  menus can be automatically generated.
</P>

<!--#include file="bottom.inc"-->
