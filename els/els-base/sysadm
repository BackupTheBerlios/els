#!/bin/bash

# set defaults
export ELS_MENU=${ELS_MENU:-main}
export ELS_MENULIB=${ELS_MENULIB:-/usr/lib/els}
export ELS_CONF=${ELS_CONF:-/etc/els.conf}
export ELS_TEMP=${TMP:-/var/tmp}/sysadm.$$
export EXPERTMODE=${EXPERTMODE:-no}
export EDITOR=${EDITOR:-vi}
if [ -f /etc/mandrake-release ]; then
  export ELS_DIALOG=${ELS_DIALOG:-"/usr/bin/dialog"}
else
  export ELS_DIALOG=${ELS_DIALOG:-"/usr/bin/dialog --cr-wrap"}
fi

# Pity, whiptail is soooooo ugly!
# If it were prettier, it would be nice, because the redhat console based
# tools use the newt toolkit, too.
#test -x /usr/bin/whiptail && ELS_DIALOG=/usr/bin/whiptail

# remember if we are the first instance of sysadm
if [ -z "$ELS_INSTANCE" ]; then
    export ELS_INSTANCE=1
else
    ELS_INSTANCE=$[ELS_INSTANCE+1]
fi


# Stores the title of this menu for later use. $3 is not used here, we
# use it for some nice GREPing in dynamic menus
function Title ()
{
    ELS_MENUNAME="$3"
}


# emit option and description in a form that is nice for sysadm
function Option ()
{
    echo -n "\"$1\" \"$2\" " >>$ELS_TEMP.dialog
}

# exit from menu and delete any leftover temporary files
function ExitMenu ()
{
    rm -f $ELS_TEMP*
    if [ "$ELS_INSTANCE" = "1" ]; then
	echo
	echo
    fi
    exit 0
}


# ask user a yes/no question, result can be tested via || and &&, e.g.
# Question "What?" || action
function Question ()
{
    $ELS_DIALOG --yesno "$1" 7 70
}


# ask user for a string to be entered
function InputString ()
{
    $ELS_DIALOG --inputbox "$1" 9 70 2>$ELS_TEMP
    local result=$?
    CHOICE=`cat $ELS_TEMP`
    return $result
}


# ask user for a string to be entered. Almost the same as above, but here
# the user can also select cancel to bail out.
function InputYesNo ()
{
    $ELS_DIALOG --menu "$1" 10 70 2 "yes" "" "no"  "" 2>$ELS_TEMP
    local result="$?"
    CHOICE=`cat $ELS_TEMP`
    return $result
}


# Displays the specified file
function ShowFile ()
{
    $ELS_DIALOG --textbox "$1" 23 76
}


# get all users except root
function GetUsers ()
{
    USERS=`who | awk '{ print $1 '} | fgrep -v root | tr \\\n \\\040`
    USERCNT=`echo $USERS | wc --words`
}


# edit a file
function EditFile ()
{
    local FILE="$2"
    test -z "$FILE" && FILE="$1"

    # silently copy the sample if the main file doesn't exist
    test -f "${FILE}.sample" -a ! -f "$FILE" && cp "${FILE}.sample" "$FILE"

    # ask if we should copy the newer sample
    test -f "$FILE" -a -f "$1" -a "${FILE}.sample" -nt "$FILE" && {
	Question "'${FILE}.sample' is newer than\n'$FILE'. Do you want to use the newer file?" && {
	    cp "${FILE}.sample" "$FILE"
	}
    }
    test "$EXPERTMODE" = "no" && EditorHints
    $EDITOR "$1"
}



# try hard to mount a floppy: first, try it with vfat, then in ext2 format
function MountFloppy () 
{
    # is something mounted, does the mount point exists and is it reachable?
    umount /mnt/floppy 2>/dev/null
    mkdir /mnt/floppy 2>/dev/null
    chmod 0700 /mnt/floppy
    # ask user for disk
    until false; do
        mount -t vfat /dev/fd0 /mnt/floppy 2>/dev/null && return 0
        mount -t ext2 /dev/fd0 /mnt/floppy 2>/dev/null && return 0
	Question "Sorry, the disk was unreadable.\n\nDo you want to try again with another disk?" || return 1
    done
    return 0
}


# set an option in $ELS_CONF
#
# Option 1:  variable
# Option 2:  new contents
# Option 3:  file where to store
# Option 4:  don't embed contents in " " if present
#
function SetOpt {
    local FILE="${3-$ELS_CONF}"

    test ! -f "$FILE" && cp --preserve "$FILE.sample" "$FILE"
    test ! -f "$FILE" && touch "$FILE"
    if [ ! -w "$FILE" ]; then
	$ELS_DIALOG --msgbox "You cannot change system parameters" 5 50
	return	
    fi

    # delete old value
    fgrep -s -v "$1=" "$FILE" >$ELS_TEMP
    mv -f $ELS_TEMP "$FILE"
    # now add the new value
    if [ -z "$4" ]; then
	echo "$1=\"$2\"" >>"$FILE"
    else
	echo "$1=$2" >>"$FILE"
    fi
    # and source the result to update my variables
    . "$FILE"
}


function ExpertWarning
{
    test "$EXPERTMODE" = "yes" && return
    $ELS_DIALOG --yesno "\
\
WARNING:\n\
\n\
Any option marked with 'for experts' can greatly influence your server\n\
and even make the server not working. Never use this options without\n\
reading AND understanding the documentation BEFORE you try what might\n\
happen. Otherwise you might crash your system, making it useless.\n\
\n\
Do you want to continue?\
" 12 78
}


function EditorHints
{
    case "$EDITOR" in

    q)  $ELS_DIALOG --msgbox "\
\
Hints to use the editor:\n\
\n\
Alt Q      quit editor without saving\n\
Alt X      to exit and save\
\
" 8 42
	;;

    vi)  $ELS_DIALOG --msgbox "\
\
Hints to use the editor:\n\
\n\
i          go into insert mode\n\
ESC        back into command mode\n\n\
: q !      leave editor without save\n\
: x        to exit and save\
\
" 11 42
	;;

    esac
}



# load all settings into environment variables
test -r $ELS_CONF && . $ELS_CONF

# look into what menu we want to go, default is "main"
ELS_MENU="${1-main}"
ELS_MENU=${ELS_MENU%%.mnu}

cd $ELS_MENULIB
while [ true ]; do

    if [ -f "$ELS_MENU.mnu" ]; then
	# put all menu options into $ELS_TEMP.dialog
	rm -f $ELS_TEMP.dialog 2>/dev/null
	if [ -z "$2" ]; then
	    . "$ELS_MENU.mnu" Query
	else
	    . "$ELS_MENU.mnu" $2
	    rm -f $ELS_TEMP*
	    exit 0
	fi

	if [ ! -s $ELS_TEMP.dialog ]; then
	    sleep 1
	    $ELS_DIALOG --msgbox "The '$ELS_MENU' menu is empty, it will be populated when you install additional ELS modules." 6 54
	    ExitMenu
	else

            # Add Help item at bottom of menu, if suitable help file exists
            HELPFILE=`find /usr/share/doc/els-* -name "$ELS_MENU.txt" 2>/dev/null`
            test "$ELS_MENU" = "main" && HELPFILE=`find /usr/share/doc/els-base* -name "index.txt" 2>/dev/null`
            test -n "$HELPFILE" && echo -n '"Help" "Help for $ELS_MENU menu"'>>$ELS_TEMP.dialog  

            # prepend this with the dialog command
            echo -n "$ELS_DIALOG --menu \"$ELS_MENUNAME\" 22 76 14 " >$ELS_TEMP.exec
            if [ ! -s $ELS_TEMP.dialog ]; then
		rm -f $ELS_TEMP*
		break
	    fi
            cat $ELS_TEMP.dialog >>$ELS_TEMP.exec

            # execute the created script
            . $ELS_TEMP.exec 2>$ELS_TEMP

            # test for cancel error and exit immediately
            test ! $? = 0 && ExitMenu

            # Test for help request and display it. 
            # Then relaunch same menu, by pretending that 'option' Query was chosen
            ANSWER=`cat $ELS_TEMP`
            if [ "$ANSWER" = "Help" ];then
                lynx -child $HELPFILE
                . $ELS_MENU.mnu Query
            else    
                # translate the result into lower case and call the menu file with the
                  # selected option
                . "$ELS_MENU.mnu" `cat $ELS_TEMP | tr A-Z a-z | tr -d " "`
            fi
	fi
    else
        $ELS_DIALOG --msgbox " Sorry, there is no menu file \"$ELS_MENULIB/$ELS_MENU.mnu\"." 6 40
        ExitMenu
    fi

done
